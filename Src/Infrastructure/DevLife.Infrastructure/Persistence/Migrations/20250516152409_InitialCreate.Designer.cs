// <auto-generated />
using System;
using DevLife.Infrastructure.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevLife.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250516152409_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyContract", b =>
                {
                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ContractId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.ToTable("CompanyContract");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyContractEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "ContractId");

                    b.HasIndex("CompanyId", "EmployeeId");

                    b.HasIndex("EmployeeId", "ContractId")
                        .IsUnique();

                    b.ToTable("CompanyContractEmployee");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyEmployee", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("CompanyEmployee");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyMaterial", b =>
                {
                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("MaterialId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("MaterialId")
                        .IsUnique();

                    b.ToTable("CompanyMaterial");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyMaterialEmployee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MaterialId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId", "EmployeeId");

                    b.HasIndex("CompanyId", "MaterialId");

                    b.HasIndex("EmployeeId", "MaterialId")
                        .IsUnique();

                    b.ToTable("CompanyMaterialEmployee");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Companies.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Companies.Player", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTutorialFinished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("PlayerName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Player");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Contracts.Contract", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContractTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Progress")
                        .HasColumnType("int");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractTemplateId");

                    b.ToTable("Contract");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Contracts.ContractTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("ContractTemplate");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Contracts.ContractType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("ContractType");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Employees.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("CBackEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CDatabase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CDevops")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("CFrontEnd")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeNameId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Experience")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<bool>("IsAvalaible")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Level")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Salary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("EmployeeNameId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Employees.EmployeeName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EmployeeName");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Employees.EmployeeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EmployeeSkill");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Employees.EmployeeSkillModificator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Modificator")
                        .HasColumnType("decimal(3, 2)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("EmployeeSkillModificator");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Materials.Material", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialTemplateId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTemplateId");

                    b.ToTable("Material");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Materials.MaterialSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Modificator")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("MaterialSkill");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Materials.MaterialTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(800)
                        .HasColumnType("nvarchar(800)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("LastModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MaterialSkillId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialSkillId");

                    b.ToTable("MaterialTemplate");
                });

            modelBuilder.Entity("EmployeeEmployeeSkill", b =>
                {
                    b.Property<Guid>("EmployeeSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeSkillsId", "EmployeesId");

                    b.HasIndex("EmployeesId");

                    b.ToTable("EmployeeEmployeeSkill");
                });

            modelBuilder.Entity("EmployeeSkillEmployeeSkillModificator", b =>
                {
                    b.Property<Guid>("EmployeeSkillsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SkillModificatorsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeSkillsId", "SkillModificatorsId");

                    b.HasIndex("SkillModificatorsId");

                    b.ToTable("EmployeeSkillEmployeeSkillModificator");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyContract", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Companies.Company", "Company")
                        .WithMany("CompanyContracts")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Domain.Modules.Contracts.Contract", "Contract")
                        .WithOne("CompanyContract")
                        .HasForeignKey("DevLife.Domain.Commons.Entity.CompanyContract", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Contract");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyContractEmployee", b =>
                {
                    b.HasOne("DevLife.Domain.Commons.Entity.CompanyContract", "CompanyContract")
                        .WithMany("AssignedEmployees")
                        .HasForeignKey("CompanyId", "ContractId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevLife.Domain.Commons.Entity.CompanyEmployee", "CompanyEmployee")
                        .WithMany("ContractAssignments")
                        .HasForeignKey("CompanyId", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyContract");

                    b.Navigation("CompanyEmployee");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyEmployee", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Companies.Company", "Company")
                        .WithMany("CompanyEmployees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Domain.Modules.Employees.Employee", "Employee")
                        .WithOne("CompanyEmployee")
                        .HasForeignKey("DevLife.Domain.Commons.Entity.CompanyEmployee", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyMaterial", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Companies.Company", "Company")
                        .WithMany("CompanyMaterials")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Domain.Modules.Materials.Material", "Material")
                        .WithOne("CompanyMaterial")
                        .HasForeignKey("DevLife.Domain.Commons.Entity.CompanyMaterial", "MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyMaterialEmployee", b =>
                {
                    b.HasOne("DevLife.Domain.Commons.Entity.CompanyEmployee", "CompanyEmployee")
                        .WithMany("MaterialAssignments")
                        .HasForeignKey("CompanyId", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("DevLife.Domain.Commons.Entity.CompanyMaterial", "CompanyMaterial")
                        .WithMany("AssignedMaterial")
                        .HasForeignKey("CompanyId", "MaterialId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CompanyEmployee");

                    b.Navigation("CompanyMaterial");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Companies.Player", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Companies.Company", "Compagny")
                        .WithOne("Player")
                        .HasForeignKey("DevLife.Domain.Modules.Companies.Player", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compagny");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Contracts.Contract", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Contracts.ContractTemplate", "ContractTemplate")
                        .WithMany("Contracts")
                        .HasForeignKey("ContractTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractTemplate");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Contracts.ContractTemplate", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Contracts.ContractType", "ContractTypes")
                        .WithMany("Contracts")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractTypes");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Employees.Employee", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Employees.EmployeeName", "EmployeeName")
                        .WithMany("Employees")
                        .HasForeignKey("EmployeeNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeName");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Materials.Material", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Materials.MaterialTemplate", "MaterialTemplate")
                        .WithMany("Material")
                        .HasForeignKey("MaterialTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialTemplate");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Materials.MaterialTemplate", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Materials.MaterialSkill", "MaterialSkill")
                        .WithMany("Materials")
                        .HasForeignKey("MaterialSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MaterialSkill");
                });

            modelBuilder.Entity("EmployeeEmployeeSkill", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Employees.EmployeeSkill", null)
                        .WithMany()
                        .HasForeignKey("EmployeeSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Domain.Modules.Employees.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeSkillEmployeeSkillModificator", b =>
                {
                    b.HasOne("DevLife.Domain.Modules.Employees.EmployeeSkill", null)
                        .WithMany()
                        .HasForeignKey("EmployeeSkillsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DevLife.Domain.Modules.Employees.EmployeeSkillModificator", null)
                        .WithMany()
                        .HasForeignKey("SkillModificatorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyContract", b =>
                {
                    b.Navigation("AssignedEmployees");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyEmployee", b =>
                {
                    b.Navigation("ContractAssignments");

                    b.Navigation("MaterialAssignments");
                });

            modelBuilder.Entity("DevLife.Domain.Commons.Entity.CompanyMaterial", b =>
                {
                    b.Navigation("AssignedMaterial");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Companies.Company", b =>
                {
                    b.Navigation("CompanyContracts");

                    b.Navigation("CompanyEmployees");

                    b.Navigation("CompanyMaterials");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Contracts.Contract", b =>
                {
                    b.Navigation("CompanyContract")
                        .IsRequired();
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Contracts.ContractTemplate", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Contracts.ContractType", b =>
                {
                    b.Navigation("Contracts");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Employees.Employee", b =>
                {
                    b.Navigation("CompanyEmployee")
                        .IsRequired();
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Employees.EmployeeName", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Materials.Material", b =>
                {
                    b.Navigation("CompanyMaterial")
                        .IsRequired();
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Materials.MaterialSkill", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("DevLife.Domain.Modules.Materials.MaterialTemplate", b =>
                {
                    b.Navigation("Material");
                });
#pragma warning restore 612, 618
        }
    }
}
